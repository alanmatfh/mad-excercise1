/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package at.ac.fhcampuswien

import java.util.Scanner
import kotlin.random.Random

class App {
    // Game logic for a number guessing game
    fun playNumberGame(digitsToGuess: Int = 4) {
        val secret = generateRandomNonRepeatingNumber(digitsToGuess)
        val scan = Scanner(System.`in`)
        var input: Int
        println("MASTERMIND - Start guessing:")
        do {
            input = scan.nextInt()
            val result = checkUserInputAgainstGeneratedNumber(input, secret)
            println("User input: $input, ${result.toString()}")
        }while(result.m != digitsToGuess)
        println("YOU WIN!")
    }

    /**
     * Generates a non-repeating number of a specified length between 1-9.
     *
     * Note: The function is designed to generate a number where each digit is unique and does not repeat.
     * It is important to ensure that the length parameter does not exceed the maximum possible length
     * for non-repeating digits (which is 9 excluding 0 for base-10 numbers).
     *
     * @param length The length of the non-repeating number to be generated.
     *               This dictates how many digits the generated number will have.
     * @return An integer of generated non-repeating number.
     *         The generated number will have a number of digits equal to the specified length and will
     *         contain unique, non-repeating digits.
     * @throws IllegalArgumentException if the length is more than 9 or less than 1.
     */
    val generateRandomNonRepeatingNumber: (Int) -> Int = { length ->
        if ( length > 9 || length < 1){
            throw IllegalArgumentException("Length must be an integer between 1 and 9")
        }
        val digits = Array<Int>(length) {0}
        digits.forEachIndexed { i, _ ->
            var next: Int
            do {
                next = Random.nextInt(0, 10)
            } while (next in digits)
            digits[i] = next
        }
        digits.shuffle()
        digits.joinToString(separator = "").toInt()
    }

    /**
     * Compares the user's input integer against a generated number for a guessing game.
     * This function evaluates how many digits the user guessed correctly and how many of those
     * are in the correct position. The game generates number with non-repeating digits.
     *
     * Note: The input and the generated number must both be numbers.
     * If the inputs do not meet these criteria, an IllegalArgumentException is thrown.
     *
     * @param input The user's input integer. It should be a number with non-repeating digits.
     * @param generatedNumber The generated number with non-repeating digits to compare against.
     * @return [CompareResult] with two properties:
     *         1. `n`: The number of digits guessed correctly (regardless of their position).
     *         2. `m`: The number of digits guessed correctly and in the correct position.
     *         The result is formatted as "Output: m:n", where "m" and "n" represent the above values, respectively.
     * @throws IllegalArgumentException if the inputs do not have the same number of digits.
     */
    val checkUserInputAgainstGeneratedNumber: (Int, Int) -> CompareResult = { input, generatedNumber ->
        val inputDigits = input.toString().map { it.toString().toInt() }
        val secretDigits = generatedNumber.toString().map { it.toString().toInt() }.toTypedArray()
        if(inputDigits.size != secretDigits.size)
            throw IllegalArgumentException("Input must have the same number of digits as the generated number!")
        val found = Array<Int>(inputDigits.size) { 0 }
        var n = 0
        var m = 0
        inputDigits.forEachIndexed{ i, value ->
            if(value == secretDigits[i]) m++
            if(value in secretDigits && value !in found) {
                n++
                found[i] = value
            }
        }
        CompareResult(n, m)   // return value is a placeholder
    }
}

fun main() {
    println("Hello World!")
    val app = App()
    app.playNumberGame()
    app.playNumberGame(3)
}
